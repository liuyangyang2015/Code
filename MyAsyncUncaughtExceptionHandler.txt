package com.example.demo.async;

import java.lang.reflect.Method;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;

import org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.AsyncConfigurer;

@Configuration
public class MyAsyncConfigurer implements AsyncConfigurer {
	
	@Autowired
	private ApplicationContext context;
	
	/**
	 * 自定义异步线程池
	 * The {@link Executor} instance to be used when processing async
	 * method invocations.
	 */
	public Executor getAsyncExecutor() {
		
		ThreadPoolExecutor   pool=new ThreadPoolExecutor(0, 0, 0, null, null);
		ExecutorService es=Executors.newCachedThreadPool();
		return es;
	}

	/**
	 * 自定义异步异常处理器 
	 * The {@link AsyncUncaughtExceptionHandler} instance to be used
	 * when an exception is thrown during an asynchronous method execution
	 * with {@code void} return type.
	 */
	public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {
		
		return new MyAsyncUncaughtExceptionHandler();
		
		
	}
	
	
	/**
	 * 异步异常处理类
	 * @author jiaqi.liu
	 *
	 */
	class MyAsyncUncaughtExceptionHandler implements AsyncUncaughtExceptionHandler{
		
		/**
		 * 异步异常处理方法
		 */
		@Override
		public void handleUncaughtException(Throwable ex, Method method, Object... params) {
			
			System.out.println("获取到的bean容器:"+context);
			System.out.println("自定义异步异常处理方法获取异步异常信息:"+ex.getMessage());
			System.out.println("方法参数:"+params[0]);
			
		}
		
	}
	


}
